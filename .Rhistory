result = map(models, evaluate_model)
formulas = list(formula_1, formula_2, formula_3, formula_4,
formula_5, formula_6, formula_7, formula_8)
models = map(formulas, ~lm(.x, data = training, weights = fex_c))
evaluate_model = function(model) {
prediction = predict(model, newdata = test)
result = list("RMSE" = RMSE(pred = exp(prediction), obs = test$impa_oi),
"MAE" = MAE(pred = exp(prediction), obs = test$impa_oi),
"MAPE" = mean(abs((test$impa_oi - exp(prediction)) / test$impa_oi))*100,
"R2" = 1- sum((test$impa_oi - exp(prediction))^2)/sum((test$impa_oi - mean(test$impa_oi))^2),
"Prediction" = exp(prediction),
"Resid" = test$impa_oi-exp(prediction))
return(result)
}
result = map(models, evaluate_model)
rmse = map_dbl(result, "RMSE")
rmse
View(result)
map_dbl(result, "MAPE")
map_dbl(result, "MAE")
map_dbl(result, "R2")
mean(test$impa_oi)
sum((test$impa_oi - mean(test$impa_oi))^2
)
formulas = list(formula_1, formula_2, formula_3, formula_4,
formula_5, formula_6, formula_7, formula_8)
models = map(formulas, ~lm(.x, data = training, weights = fex_c))
evaluate_model = function(model) {
prediction = predict(model, newdata = test)
result = list("RMSE" = RMSE(pred = exp(prediction), obs = test$impa_oi),
"MAE" = MAE(pred = exp(prediction), obs = test$impa_oi),
"MAPE" = mean(abs((test$impa_oi - exp(prediction)) / test$impa_oi))*100,
"R2" = 1 - sum((test$impa_oi - exp(prediction))^2) / sum((test$impa_oi - mean(test$impa_oi))^2),
"R2log" = "R2_log" = 1 - sum((log(test$impa_oi) - prediction)^2) / sum((log(test$impa_oi) - mean(log(test$impa_oi)))^2),
formulas = list(formula_1, formula_2, formula_3, formula_4,
formula_5, formula_6, formula_7, formula_8)
models = map(formulas, ~lm(.x, data = training, weights = fex_c))
evaluate_model = function(model) {
prediction = predict(model, newdata = test)
result = list("RMSE" = RMSE(pred = exp(prediction), obs = test$impa_oi),
"MAE" = MAE(pred = exp(prediction), obs = test$impa_oi),
"MAPE" = mean(abs((test$impa_oi - exp(prediction)) / test$impa_oi))*100,
"R2" = 1 - sum((test$impa_oi - exp(prediction))^2) / sum((test$impa_oi - mean(test$impa_oi))^2),
"R2_log" = 1 - sum((log(test$impa_oi) - prediction)^2) / sum((log(test$impa_oi) - mean(log(test$impa_oi)))^2),
"Prediction" = exp(prediction),
"Resid" = test$impa_oi-exp(prediction))
return(result)
}
result = map(models, evaluate_model)
rmse = map_dbl(result, "RMSE")
View(result)
map_dbl(result, "R2")
map_dbl(result, "R2log")
map_dbl(result, "R2_log")
rlang::last_trace()
rmse = map_dbl(result, "RMSE")
map_dbl(result, "R2_log")
round(map_dbl(result, "R2_log"), 2)
round(map_dbl(result, "R2_log"), 3)
round(map_dbl(result, "MAPE"), 3)
round(map_dbl(result, "MAE"), 3)
round(map_dbl(result, "RMSE"), 3)
check_mod_8 = check_model(models[[8]])
View(check_mod_8)
View(check_mod_8[["VIF"]])
View(check_mod_8[["QQ"]])
View(check_mod_8[["PP_CHECK"]])
performance::check_heteroscedasticity(models[[8]])
performance::check_collinearity(models[[8]])
performance::check_distribution(models[[8]])
performance::check_autocorrelation(models[[8]])
performance::check_heterogeneity_bias(models[[8]])
performance::check_normality(models[[8]])
performance::check_normality(models[[7]])
performance::check_normality(models[[6]])
performance::check_normality(models[[5]])
model_performance(models[[8]])
check_mod_8
View(check_mod_8)
check_mod_8[["VIF"]]
View(check_mod_8[["VIF"]])
View(check_mod_8[["QQ"]])
check_mod_8[["INFLUENTIAL"]][["Influential"]]
View(check_mod_8[["INFLUENTIAL"]])
check_mod_8$INFLUENTIAL
check_mod_8$INFLUENTIAL |>
filter(Influential != "OK")
check_model
View(check_mod_8)
View(check_mod_8[["INFLUENTIAL"]])
influ = check_mod_8[["INFLUENTIAL"]]
table(influ$Influential)
check_model(models[[8]])
check_model(models[[8]])
residuals = residuals |>
mutate(resid_8_std = scale(resid_8))
ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 30, fill = "purple", alpha = 0.5) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
x = "Standardized Residual", y = "Count")
low_8 = quantile(residuals$resid_8, 0.05)
up_8 = quantile(residuals$resid_8, 0.95)
data = test |>
select(impa_oi, female, age, y_total_m, oficio2, oficio, estrato1, informal, maxEducLevel, ingtot) |>
mutate(pred_8 = result[[8]][["Prediction"]],
resid_8_std = residuals$resid_8_std)
out_8 = data |> filter(resid_8_std > 2 | resid_8_std < -2) |>
arrange(resid_8_std)
ggplot(data, aes(x = pred_8, y = resid_8_std)) +
geom_point(alpha = 0.5, color = "blue") +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Standardized Residuals vs. Fitted Values (Model 8)",
x = "Fitted Values (Predicted impa_oi)",
y = "Standardized Residuals")
View(models)
check_mod_8
residuals = data.frame("resid_8" = result[[8]]$Resid)
residuals = residuals |>
mutate(resid_8_std = scale(resid_8))
ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 300, fill = "purple", alpha = 0.5) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
x = "Standardized Residual", y = "Count")
ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 3000, fill = "purple", alpha = 0.5) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
x = "Standardized Residual", y = "Count")
ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 1000, fill = "purple", alpha = 0.5) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
x = "Standardized Residual", y = "Count")
ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 800, fill = "purple", alpha = 0.5) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
x = "Standardized Residual", y = "Count")
ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 800, fill = "purple", alpha = 0.5) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
subtitle = "2 standard deviation intervals"
x = "Standardized Residual", y = "Count")
ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 800, fill = "purple", alpha = 0.5) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
subtitle = "2 standard deviation intervals",
x = "Standardized Residual", y = "Count")
ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 800, fill = "purple", alpha = 0.5) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
subtitle = "±2σ intervals",
x = "Standardized Residual", y = "Count")
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Residuos estandarizados vs. valores ajustados",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Magnitud del Residuo")
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Extremeness of outlier")
ggplot(data, aes(x = as.factor(oficio), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Residuos estandarizados por ocupación")
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Residuos estandarizados por ocupación")
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Standardized residuals by Occupation",
ylab = "Occupation",
xlab = "Standardized residuals")
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Extremeness of outlier") +
guides(color = guide_colorbar(barwidth = 10, barheight = 0.5)) +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.key.height = unit(0.3, "cm"))
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Extremeness of outlier") +
theme(legend.text = element_text(size = 8),  # Reduce el tamaño del texto de la leyenda
legend.title = element_text(size = 9), # Reduce el tamaño del título
legend.key.size = unit(0.5, "cm"))     # Reduce el tamaño proporcional de la leyenda
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Extremeness") +
theme(legend.text = element_text(size = 8),  # Reduce el tamaño del texto de la leyenda
legend.title = element_text(size = 9), # Reduce el tamaño del título
legend.key.size = unit(0.5, "cm"))     # Reduce el tamaño proporcional de la leyenda
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Outlier magnitude") +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.key.size = unit(0.5, "cm"))      la leyenda
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Outlier magnitude") +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.key.size = unit(0.5, "cm"))
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Outlier magnitude") +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.title.align = 0.5,
legend.key.size = unit(0.5, "cm"))
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Outlier magnitude") +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9),
legend.title = element_text(hjust = 0.5),
legend.key.size = unit(0.5, "cm"))
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Standardized residuals vs. fitted values",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Outlier magnitude") +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9, hjust = 0.5),
legend.key.size = unit(0.5, "cm"))
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Outlier prediction (Model 8)",
ylab = "Occupation",
xlab = "Standardized residuals")
ggsave(p_1, path =  "Distribution_residuals.jpg")
p_1 = ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 800, fill = "purple", alpha = 0.5, ) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
subtitle = "±2σ intervals",
x = "Standardized Residual", y = "Count")
ggsave(p_1, path =  "Distribution_residuals.jpg")
ggsave(plot = p_1, filename = "Distribution_residuals.jpg")
p_1
ggsave(plot = p_1, filename = "Distribution_residuals.jpg", scale = 1.3)
ggsave(plot = p_1, filename = "Distribution_residuals.jpg", scale = 5.5)
ggsave(plot = p_1, filename = "Distribution_residuals.jpg", scale = 6)
ggsave(plot = p_1, filename = "Distribution_residuals.jpg", scale = 4)
ggsave(plot = p_1, filename = "Distribution_residuals.jpg", scale = 2)
ggsave(plot = p_1, filename = "Distribution_residuals.jpg", scale = 1.5)
ggsave(plot = p_1, filename = "Distribution_residuals.jpg", width = 8, height = 7)
ggsave(plot = p_1, filename = "Distribution_residuals.jpg", width = 10, height = 7)
low_8 = quantile(residuals$resid_8, 0.05)
up_8 = quantile(residuals$resid_8, 0.95)
data = test |>
select(impa_oi, female, age, y_total_m, oficio2, oficio, estrato1, informal, maxEducLevel, ingtot) |>
mutate(pred_8 = result[[8]][["Prediction"]],
resid_8_std = residuals$resid_8_std)
out_8 = data |> filter(resid_8_std > 2 | resid_8_std < -2) |>
arrange(resid_8_std)
ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Outlier prediction (Model 8)",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Outlier magnitude") +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9, hjust = 0.5),
legend.key.size = unit(0.5, "cm"))
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Outlier prediction (Model 8)",
ylab = "Occupation",
xlab = "Standardized residuals")
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Outlier prediction (Model 8)",
y = "Occupation",
x = "Standardized residuals")
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_violin() +
coord_flip() +
theme_minimal() +
labs(title = "Outliers by ocupation",
y = "Occupation",
x = "Standardized residuals")
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Outliers by ocupation",
y = "Occupation",
x = "Standardized residuals")
p_1
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Outliers by ocupation",
x = "Occupation",
y = "Standardized residuals")
ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Outliers by ocupation",
x = "Occupation",
y = "Standardized residuals")
low_8 = quantile(residuals$resid_8, 0.05)
up_8 = quantile(residuals$resid_8, 0.95)
data = test |>
select(impa_oi, female, age, y_total_m, oficio2, oficio, estrato1, informal, maxEducLevel, ingtot) |>
mutate(pred_8 = result[[8]][["Prediction"]],
resid_8_std = residuals$resid_8_std)
out_8 = data |> filter(resid_8_std > 2 | resid_8_std < -2) |>
arrange(resid_8_std)
p_2 = ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Outlier prediction (Model 8)",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Outlier magnitude") +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9, hjust = 0.5),
legend.key.size = unit(0.5, "cm"))
p_3 = ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Outliers by ocupation",
x = "Occupation",
y = "Standardized residuals")
ggsave(plot = p_2, filename = "resid_vs_fitted.jpg", width = 10, height = 7)
ggsave(plot = p_3, filename = "out_by_ocup.jpg", width = 10, height = 7)
set.seed(1541)
in_train = createDataPartition(y = db2$impa_oi,
p = 0.7,
list = FALSE)
training = db2 %>%
filter(row_number() %in% in_train)
test = db2 %>%
filter(!row_number() %in% in_train)
for (var in c("maxEducLevel", "estrato1", "oficio2")) {
training[[var]] <- as.factor(training[[var]])
test[[var]] <- factor(test[[var]], levels = levels(training[[var]]))
}
# Previous specifications
formula_1 = formula(log(impa_oi) ~ age + I(age^2))
formula_2 = formula(log(impa_oi) ~ female)
formula_3 = formula(log(impa_oi) ~ female + age + I(age^2) + factor(maxEducLevel) + informal + factor(estrato1))
# 5 additional specifications
formula_4 = formula(log(impa_oi) ~ female + age + I(age^2) + factor(maxEducLevel) + informal + factor(estrato1) + factor(oficio2))
formula_5 = formula(log(impa_oi) ~ female * factor(maxEducLevel) + age + I(age^2) + informal + factor(estrato1) + factor(oficio2))
formula_6 = formula(log(impa_oi) ~ female * factor(maxEducLevel) + poly(age, 3) + informal * factor(maxEducLevel) + factor(estrato1) + factor(oficio2))
formula_7 = formula(log(impa_oi) ~ female * factor(maxEducLevel) + poly(age, 3) + informal * factor(maxEducLevel) + factor(estrato1) * factor(maxEducLevel) + factor(oficio2))
formula_8 = formula(log(impa_oi) ~ female * factor(maxEducLevel) * factor(estrato1) + poly(age, 3) + informal * factor(maxEducLevel) + factor(oficio2))
formulas = list(formula_1, formula_2, formula_3, formula_4,
formula_5, formula_6, formula_7, formula_8)
models = map(formulas, ~lm(.x, data = training, weights = fex_c))
evaluate_model = function(model) {
prediction = predict(model, newdata = test)
result = list("RMSE" = RMSE(pred = exp(prediction), obs = test$impa_oi),
"MAE" = MAE(pred = exp(prediction), obs = test$impa_oi),
"MAPE" = mean(abs((test$impa_oi - exp(prediction)) / test$impa_oi))*100,
"R2" = 1 - sum((test$impa_oi - exp(prediction))^2) / sum((test$impa_oi - mean(test$impa_oi))^2),
"R2_log" = 1 - sum((log(test$impa_oi) - prediction)^2) / sum((log(test$impa_oi) - mean(log(test$impa_oi)))^2),
"Prediction" = exp(prediction),
"Resid" = test$impa_oi-exp(prediction))
return(result)
}
result = map(models, evaluate_model)
rmse = map_dbl(result, "RMSE")
residuals = data.frame("resid_8" = result[[8]]$Resid)
# Standardized residuals
residuals = residuals |>
mutate(resid_8_std = scale(resid_8))
p_1 = ggplot(residuals, aes(x = resid_8_std)) +
geom_histogram(bins = 800, fill = "purple", alpha = 0.5, ) +
geom_vline(xintercept = c(-2, 2), linetype = "dashed", color = "red") +
theme_minimal() +
labs(title = "Distribution of Standardized Residuals (Model 8)",
subtitle = "±2σ intervals",
x = "Standardized Residual", y = "Count")
low_8 = quantile(residuals$resid_8, 0.05)
up_8 = quantile(residuals$resid_8, 0.95)
data = test |>
select(impa_oi, female, age, y_total_m, oficio2, oficio, estrato1, informal, maxEducLevel, ingtot) |>
mutate(pred_8 = result[[8]][["Prediction"]],
resid_8_std = residuals$resid_8_std)
out_8 = data |> filter(resid_8_std > 2 | resid_8_std < -2) |>
arrange(resid_8_std)
p_2 = ggplot(data, aes(x = pred_8, y = resid_8_std, color = abs(resid_8_std))) +
geom_point(alpha = 0.7) +
geom_hline(yintercept = c(-2, 2), linetype = "dashed", color = "red") +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
labs(title = "Outlier prediction (Model 8)",
x = "Fitted Values",
y = "Standardized Residuals",
color = "Outlier magnitude") +
theme(legend.text = element_text(size = 8),
legend.title = element_text(size = 9, hjust = 0.5),
legend.key.size = unit(0.5, "cm"))
p_3 = ggplot(data, aes(x = as.factor(oficio2), y = resid_8_std)) +
geom_boxplot() +
coord_flip() +
theme_minimal() +
labs(title = "Outliers by ocupation",
x = "Occupation",
y = "Standardized residuals")
# Defining control
ctrl_par <- trainControl(method = "LOOCV", verboseIter = TRUE, allowParallel = TRUE)
# Defining parallel clusters
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
train_parallel <- function(formula) {
model <- train(formula, data = db2, method = 'lm', trControl = ctrl_par)
return(model)
}
time_par7 <- system.time(mod_par7 <- train_parallel(formula_7))
time_par8 <- system.time(mod_par8 <- train_parallel(formula_8))
stopCluster(cl)
registerDoSEQ()
print(paste("Tiempo paralelo:", time_par7["elapsed"], "segundos"))
print(paste("Tiempo paralelo:", time_par8["elapsed"], "segundos"))
# mod_par7$results
# mod_par8$results
